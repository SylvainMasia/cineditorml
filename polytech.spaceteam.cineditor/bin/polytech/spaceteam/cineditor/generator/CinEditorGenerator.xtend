/*
 * generated by Xtext 2.14.0
 */
package polytech.spaceteam.cineditor.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.util.ArrayList
import javax.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameProvider
import CinEditorML.Movie
import java.util.List
import CinEditorML.Layer
import CinEditorML.Element
import CinEditorML.Text
import CinEditorML.GraphicalElement
import CinEditorML.Picture
import CinEditorML.Video
import CinEditorML.FadeOut
import CinEditorML.FadeIn
import CinEditorML.Translate
import CinEditorML.Effect
import CinEditorML.ItemPositionInt
import CinEditorML.ItemPosition
import CinEditorML.ItemPositionString
import CinEditorML.Shape
import CinEditorML.Rectangle
import java.awt.Color
import CinEditorML.AudioElement
import CinEditorML.Margin
import CinEditorML.MARGIN_NAME

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class CinEditorGenerator extends AbstractGenerator {

	val varMovieHeight = "movie_height";
	val varMovieWidth = "movie_width";
	val elementsVarNames = new ArrayList();
	var totalMovieDuration = 0;
	
	@Inject extension IQualifiedNameProvider
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (movie : resource.allContents.toIterable.filter(Movie)) {
			val _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(movie);
			fsa.generateFile(
            	_fullyQualifiedName + ".py",
            	compile(movie));
			fsa.generateFile(
            	_fullyQualifiedName + ".html",
            	compileTimeline(movie));
        	elementsVarNames.clear();
			totalMovieDuration = 0;
		}
//		fsa.generateFile(
//            	"cinEditorMovie.css",
//            	compileCss());
	}
	
	private def String compile(Movie movie) {
		extractMovieDuration(movie);
		var movieString = loadImports();
		movieString += extractMovieSize(movie);
		movieString += extractLayers(movie.getLayers());
		movieString += extractFinalCut(movie);
		return movieString;
	}
	
	private def extractMovieDuration(Movie movie) {
		for (Layer layer : movie.layers) {
			for (Element element : layer.elements) {
				if (element instanceof AudioElement || element instanceof GraphicalElement) {
					var tmpDuration = 0;
					if (element.duration > 0) {
						tmpDuration = element.duration;
					}
					if (element.temporalPosition !== null) {
						if (element.temporalPosition.elementToStartAfter !== null) {
							tmpDuration += element.temporalPosition.elementToStartAfter.endingTime;
						}
						if (element.temporalPosition.beginTime > 0) {
							tmpDuration += element.temporalPosition.beginTime;
						}
					}
					element.endingTime = tmpDuration;
					if (tmpDuration > totalMovieDuration) {
						totalMovieDuration = tmpDuration;
					}
				}
			}
		}
	}
	
	private def String extractFinalCut(Movie movie) {
		var sFinal = "\nfinal_video = CompositeVideoClip([";
		for (var i = 0; i < elementsVarNames.size(); i++) {
			if (i != 0) {
				sFinal += ", ";
			}
			sFinal += elementsVarNames.get(i);
		}
		sFinal += "], size=(" + varMovieWidth + "," + varMovieHeight + ")).set_duration(" + totalMovieDuration + ")\n"; //TODO when no video set a calculated duration
		sFinal += "final_video.write_videofile('./" + movie.getName()  + ".mp4', codec='mpeg4', bitrate='5000k', fps=" + movie.getFps() +")";
		return sFinal;
	}
	
	private def String extractLayers(List<Layer> layers) {
		var s = "";
		for (Layer layer : layers) {
			s += extractElementsFromLayer(layer.getElements());
		}
		return s;
	}
	
	private def String extractElementInLayer(Element element) {
		var s = "";
		if (element instanceof Text) {
			s += extractElement(element as Text);
		 } else if (element instanceof Picture) {
			s += extractElement(element as Picture);
		} else if (element instanceof Video) {
			s += extractElement(element as Video);
		} else if (element instanceof Effect) {
			s += extractElement(element as Effect);
		} else if (element instanceof Shape) {
			s += extractElement(element as Shape);
		} else if (element instanceof AudioElement) {
			s += extractElement(element as AudioElement);
		}
		return s;
	}
	
	private def String extractBeginTimeFromElement(Element element) {
		var s = "";
		var duration = 0;
		if (element.temporalPosition !== null) {
			if (element.temporalPosition.elementToStartAfter !== null) {
				duration += element.temporalPosition.elementToStartAfter.endingTime;
			}
			if (element.temporalPosition.beginTime > 0) {
				duration += element.temporalPosition.beginTime;
			}
		}
		if (duration > 0) {
			s += "\\\n\t.set_start(" + duration + ")";
		}
		return s;
	}
	
	private def String extractDurationFromElement(Element element) {
		var s = "";
		var duration = -1;
		if (element.duration > 0) {
			duration = element.duration;
		} else {
			duration = totalMovieDuration;
		}
		if (element instanceof Video) {
			var video = element as Video;
			if (video.beginCropTime == 0) {
				s += "\\\n\t.set_duration(" + duration + ")";
			}
		else if (element instanceof AudioElement) {
			var audio = element as AudioElement;
			if (audio.beginCropTime == 0) {
				s += "\\\n\t.set_duration(" + duration + ")";
			}
		} 
		} else {
			s += "\\\n\t.set_duration(" + duration + ")";
		}
		return s;
	}
	
	private def String extractDimensionFromElement(GraphicalElement element) {
		var s = "";
		var width = "0"
			var height = "0"
		if (element.dimension !== null) {
			if (element.dimension.width < 0) {
				width = varMovieWidth;
			} else {
				width = element.dimension.width + "";
			}
			if (element.dimension.height < 0) {
				height = varMovieWidth;
			} else {
				height = element.dimension.height + "";
			}
		} else {
			width = varMovieWidth;
			height = varMovieWidth;
		}
		if (element instanceof Shape) {
			s += "(" + width + ", " + height + ")";
		} else {
			s += "\\\n\t.resize((" + width + ", " + height + "))";
		}
		return s;
	}
	
	private def String extractPositionFromElement(GraphicalElement element) {
		var s = "";
		var posX = "";
		var posY = "";
		if (element.position !== null) {
			posX = extractValueFromItemPosition(element.position.x);
			posY = extractValueFromItemPosition(element.position.y);
		} else {
			posX = "0";
			posY = "0";
		}

		if (!posX.equals("0") || !posY.equals("0")) {
			s += "\\\n\t.set_pos((" + posX + ", " + posY + "))";
		}
		return s;
	}
	
		private def String extractMarginsFromElement(GraphicalElement element) {
		var s = "";
		for (Margin margin : element.margins) {
			var color = "[0,0,0]"; // need rgb color for color clip
			if (margin.marginColor !== null) {
				val tmp = Color.decode("#" + margin.marginColor.hexadecimalValue);
				color = "(" + tmp.red + "," + tmp.green + "," + tmp.blue + ")";
			}
			if (margin.size > 0) {
				var marginName = '';
				if (margin.type.equals(MARGIN_NAME.BOTTOM)) {
					marginName = 'bottom';
				} else if (margin.type.equals(MARGIN_NAME.TOP)) {
					marginName = 'top';
				} else if (margin.type.equals(MARGIN_NAME.LEFT)) {
					marginName = 'left';
				} else if (margin.type.equals(MARGIN_NAME.RIGHT)) {
					marginName = 'right';
				}
				s += "\\\n\t.margin("+ marginName + "=" + margin.size + ", color=" + color + ", opacity=" + margin.marginColorOpacity + ")";
			}
		}
		return s;
	}
	
	private def String extractValueFromItemPosition(ItemPosition item) {
		if (item instanceof ItemPositionInt) {
			return (item as ItemPositionInt).position + "";
		}
		return "'" + (item as ItemPositionString).position + "'";
	}
		
	private def String extractElement(Text element) {		
		var s = element.getName() 
				+ " = TextClip("
					+ "\"" +element.getText() + "\""
					+ ", color='#" + element.getColor().getHexadecimalValue() + "'"
					+ ", fontsize=" + element.getFontSize()
				+ ")"
				+ extractBeginTimeFromElement(element)
				+ extractDurationFromElement(element)
				+ extractPositionFromElement(element)
				+ "\n\n";
		elementsVarNames.add(element.getName());
		return s;
	}
	
	private def String extractElement(Picture element) {
		var s = element.getName() 
				+ " = ImageClip("
					+ "\"" +element.url + "\""
				+ ")"
				+ extractBeginTimeFromElement(element)
				+ extractDurationFromElement(element)
				+ extractPositionFromElement(element)
				+ extractDimensionFromElement(element)
				+ extractMarginsFromElement(element)
				+ "\n\n";
		elementsVarNames.add(element.getName());
		return s;
	}
	
	private def String extractElement(AudioElement element) {
		var volume = "";
		var fadeIn = "";
		var fadeOut = "";
		var cropString = "";
		if (element.volume != 1) {
			volume = "\\\n\t.volumex(" + element.volume + ")";
		}
		if (element.fadeIn != 0) {
			fadeIn = "\\\n\t.audio_fadein(" + element.fadeIn + ")";
		}
		if (element.fadeOut != 0) {
			fadeOut = "\\\n\t.audio_fadeout(" + element.fadeOut + ")";
		}
		if (element.beginCropTime > -1) {
			cropString = "\\\n\t.subclip(" + element.beginCropTime + ", " + (element.beginCropTime + element.duration) + ")";
		}
		var s = element.name 
				+ " = AudioFileClip(" + "\"" +element.url + "\"" + ")"
					+ extractBeginTimeFromElement(element)
					+ extractDurationFromElement(element)
					+ cropString
					+ volume
					+ fadeIn
					+ fadeOut
					+ "\n";
		s += element.name + "_fake_audio_attached = ColorClip(size=(0, 0), col=[0,0,0]).set_audio(" + element.name + ")\n\n";
		elementsVarNames.add(element.name + "_fake_audio_attached");
		return s;
	}
	
	private def String extractElement(Video element) {
		var cropString = ""
		if (element.beginCropTime > -1) {
			cropString = "\\\n\t.subclip(" + element.beginCropTime + ", " + (element.beginCropTime + element.duration) + ")";
		}
		var audio = "";
		if (element.enableAudio == true) {
			audio = "True";
		} else {
			audio = "False";
		}
		var s = element.getName() 
				+ " = VideoFileClip(" + "\"" +element.url + "\"" + ", audio=" + audio +")"
					+ extractBeginTimeFromElement(element)
					+ extractDurationFromElement(element)
					+ extractDimensionFromElement(element)
					+ extractPositionFromElement(element)
					+ extractMarginsFromElement(element)
					+ cropString
					+ "\n\n";
		elementsVarNames.add(element.getName());
		return s;
	}
	
	private def String extractElement(FadeIn element) {
		var s = "";
		for (GraphicalElement elementToApplyEffect : element.elements) {
			s += elementToApplyEffect.name + " = " + elementToApplyEffect.name + ".crossfadein(" + element.duration + ")\n\n"
		}
		return s;
	}
	
	private def String extractElement(FadeOut element) {
		var s = "";
		for (GraphicalElement elementToApplyEffect : element.elements) {
			s += elementToApplyEffect.name + " = " + elementToApplyEffect.name + ".crossfadeout(" + element.duration + ")\n\n"
		}
		return s;
	}
	
	private def String extractElement(Translate element) {
		var s = "";
		
		return s;
	}
	
	
	private def String extractElement(Rectangle element) {
		var color = "[0,0,0]"; // need rgb color for color clip
		if (element.color !== null) {
			val tmp = Color.decode("#" + element.color.hexadecimalValue);
			color = "[" + tmp.red + "," + tmp.green + "," + tmp.blue + "]";
		}
		var s = element.getName() 
				+ " = ColorClip(size=" + extractDimensionFromElement(element) + ", col=" + color + ")"
				+ extractBeginTimeFromElement(element)
				+ extractDurationFromElement(element)
				+ extractMarginsFromElement(element)
				+ extractPositionFromElement(element)
				+ "\n\n";
		elementsVarNames.add(element.getName());
		return s;
	}
	
	private def String extractElement(Effect element) {
		var s = "";
		if (element instanceof FadeIn) {
			s += extractElement(element as FadeIn);
		} else if (element instanceof FadeOut) {
			s += extractElement(element as FadeOut);
		} else if (element instanceof Translate) {
			s += extractElement(element as Translate);
		} 
		return s;
	}
	
	private def String extractElement(Shape element) {
		var s = "";
		if (element instanceof Rectangle) {
			s += extractElement(element as Rectangle);
		}
		return s;
	}
	
	private def String extractElementsFromLayer(List<Element> elements) {
		var s = "";
		for (Element element : elements) {
			s += extractElementInLayer(element);
		}
 		return s;
	}

	private def String extractMovieSize(Movie movie) {
		var s = varMovieHeight + " = " + movie.getDimension().getHeight() + "\n";
		s += varMovieWidth + " = " + movie.getDimension().getWidth() + "\n";
		s += "\n";
		return s;
	}
	
	private def String loadImports() {
		var s = "# -*- coding: ISO-8859-1 -*-\n\n"
		s += "from moviepy.editor import *\n";
		s += "\n";
		return s;
	}
	
	val timelineElementHeight = 27;
	val timelineElementHeightWithMargin = 28;
	var ratio = 8
	
	private def String compileCss() {
		var s = "\t\t\t.layer-timeline {\n"
				+ "\t\t\t\tposition: relative;\n"
				+ "\t\t\t\tmargin-left: 100px;\n"
				+ "\t\t\t\twidth: 100%;\n"
				+ "\t\t\t}\n";
		s += "\t\t\t.layer-name {\n"
			+ "\t\t\t\tz-index: 2;\n"
			+ "\t\t\t\tposition: fixed;\n"
			+ "\t\t\t\twidth: 100px;\n"
			+ "\t\t\t\tbackground-color: #18abad;\n"
			+ "\t\t\t\tcolor: #fff;\n"
			+ "\t\t\t\tfont-size: 18pt;\n"
			+ "\t\t\t}\n";
		s += "\t\t\t.layer-element {\n"
			+ "\t\t\t\tcolor: #fff;\n"
			+ "\t\t\t\tfont-size: 15pt;\n"
			+ "\t\t\t\tmargin-left: 10px;\n"
			+ "\t\t\t\tmargin-bottom: 1px;\n"
			+ "\t\t\t\tborder-radius: 4px;\n"
			+ "\t\t\t}\n";
		s += "\t\t\t.layer {\n"
			+ "\t\t\t\tmargin-bottom: 1px;\n"
			+ "\t\t\t\tdisplay: flex;\n"
			+ "\t\t\t}\n";
		s += "\t\t\t#timeline-indicator {\n"
			+ "\t\t\t\tmargin-left: 100px;\n"
			+ "\t\t\t\theight: 15px;\n"
			+ "\t\t\t\tbackground-color: #e3e3e3;\n"
			+ "\t\t\t}\n";
		s += "\t\t\t#container-timeline-indicator {\n"
			+ "\t\t\t\theight: 15px;\n"
			+ "\t\t\t\tposition: relative;\n"
			+ "\t\t\t\tleft: 100px;\n"
			+ "\t\t\t\twidth: calc(100% - 100px);\n"
			+ "\t\t\t\ttop: -15px;\n"
			+ "\t\t\t}\n";
		s += "\t\t\t.timeline-indicator-element {\n"
			+ "\t\t\t\theight: 100%;\n"
			+ "\t\t\t\ttop: 100%;\n"
			+ "\t\t\t\ttransform: translate(-50%, 0);\n"
			+ "\t\t\t\tposition: absolute;\n"
			+ "\t\t\t}\n";
		s += "\t\t\t.timeline-indicator-element::before {\n"
			+ "\t\t\t\tcontent: \"\";"
			+ "\t\t\t\twidth: 2px;"
			+ "\t\t\t\theight: 100%;"
			+ "\t\t\t\tleft: 50%;"
			+ "\t\t\t\tposition: absolute;\n"
			+ "\t\t\t\tbackground-color: black;"
			+ "\t\t\t\ttop: -100%;"
			+ "}";
		s += "\t\t\tbody {\n"
			+ "\t\t\t\tmargin: 0;\n"
			+ "\t\t\t\tpadding: 0;\n"
			+ "\t\t\t\tpadding: 0;\n"
			+ "\t\t\t\toverflow: auto;\n"
			+ "\t\t\t}\n";
		return s;
	}
	
	private def String compileTimeline(Movie movie) {
		if (totalMovieDuration > 30) {
			ratio = 3 * (100 / totalMovieDuration);
			if (ratio < 4) {
				ratio = 4;
			}
		}
		var s = "<!DOCTYPE html>\n"
			 + "<html>\n"
			 + "\t<head>\n"
			 + "\t\t<style>\n"
			 + compileCss()
			 + "\t\t</style>\n"
			 + "\t</head>\n"
			 + "\t<body>\n";
		var top = 0;
		for (var i = 0; i < movie.layers.size(); i++) {
			var layer = movie.layers.get(i);
			s += "\t\t<div class=\"layer\">\n";
			
				s += "\t\t\t<div class=\"layer-name\" style=\"";
				s += " top: " + top + "px;"
				s += " height: " + layer.elements.size * timelineElementHeightWithMargin + "px;"
				top += (layer.elements.size * timelineElementHeightWithMargin) + 1 
				s += "\">";
				
				s += "\t\t\t\tLayer " + i + "\n"
				s += "\t\t\t</div>\n"
				s += "\t\t\t<div class=\"layer-timeline\">\n";
					for (Element element : layer.elements) {
						s += "\t\t\t<div class=\"layer-element\" style=\"";
						var duration = -1;
						if (element.duration > 0) {
							duration = element.duration;
						} else {
							duration = totalMovieDuration;
						}
						var beginTime = 0;
						if (element.temporalPosition !== null) {
							beginTime += element.temporalPosition.beginTime;
							if (element.temporalPosition.elementToStartAfter !== null) {
								beginTime += element.temporalPosition.elementToStartAfter.endingTime;
							}
						}
						if (element instanceof AudioElement) {
							var borderTopLeft = 4;
							var borderTopRight = 4;
							if (element.fadeIn > 0) {
								borderTopLeft = 1 + element.fadeIn * 10 * ratio;
							}
							if (element.fadeOut > 0) {
								borderTopRight = 1 + element.fadeOut * 10 * ratio;
							}
							s += " border-radius: " + borderTopLeft + "px " + borderTopRight + "px 0 0;"
						}
						s += " width:" + duration * ratio + "%;";
						s += " background-color: #000;";
						s += " margin-left:" + beginTime * ratio + "%;";
						s += " height:" + timelineElementHeight + "px;";
						s += "\">\n";
						s += element.name + "\n"
						s += "\t\t\t</div>\n"						
					}
				s += "\t\t\t</div>\n"
			s += "\t\t</div>\n";
		}
		s += "\t\t<div id=\"timeline-indicator\" style=\"width: calc(" + (totalMovieDuration * ratio) + "% - " + totalMovieDuration * ratio + "px);\"></div>\n";
		
		s += "\t\t<div id=\"container-timeline-indicator\">\n";
		for (var i = 0; i < totalMovieDuration; i += 3) {
			s += "\t\t\t<div class=\"timeline-indicator-element\" style=\"left: " + (i * ratio) + "%;\">" + i + "s</div>";
		}
		s += "\t\t\t<div class=\"timeline-indicator-element\" style=\"left: " + (totalMovieDuration * ratio) +"%\">" + totalMovieDuration + "s</div>";
		s += "\t\t</div>\n";
		
		s += "\t</body>\n"
			 + "</html>\n"
		return s;
	}
}
