/**
 * generated by Xtext 2.14.0
 */
package polytech.spaceteam.cineditor.generator;

import CinEditorML.AudioElement;
import CinEditorML.Dimension;
import CinEditorML.Effect;
import CinEditorML.Element;
import CinEditorML.FadeIn;
import CinEditorML.FadeOut;
import CinEditorML.GraphicalElement;
import CinEditorML.HexadecimalColor;
import CinEditorML.ItemPosition;
import CinEditorML.ItemPositionInt;
import CinEditorML.ItemPositionString;
import CinEditorML.Layer;
import CinEditorML.MARGIN_NAME;
import CinEditorML.Margin;
import CinEditorML.Movie;
import CinEditorML.Picture;
import CinEditorML.Position;
import CinEditorML.Rectangle;
import CinEditorML.Shape;
import CinEditorML.TemporalPosition;
import CinEditorML.Text;
import CinEditorML.Translate;
import CinEditorML.Video;
import com.google.common.collect.Iterables;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CinEditorGenerator extends AbstractGenerator {
  private final String varMovieHeight = "movie_height";
  
  private final String varMovieWidth = "movie_width";
  
  private final ArrayList<Object> elementsVarNames = new ArrayList<Object>();
  
  private int totalMovieDuration = 0;
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Movie> _filter = Iterables.<Movie>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Movie.class);
    for (final Movie movie : _filter) {
      {
        final QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(movie);
        String _plus = (_fullyQualifiedName + ".py");
        fsa.generateFile(_plus, 
          this.compile(movie));
        String _plus_1 = (_fullyQualifiedName + ".html");
        fsa.generateFile(_plus_1, 
          this.compileTimeline(movie));
        this.elementsVarNames.clear();
        this.totalMovieDuration = 0;
      }
    }
  }
  
  private String compile(final Movie movie) {
    this.extractMovieDuration(movie);
    String movieString = this.loadImports();
    String _movieString = movieString;
    String _extractMovieSize = this.extractMovieSize(movie);
    movieString = (_movieString + _extractMovieSize);
    String _movieString_1 = movieString;
    String _extractLayers = this.extractLayers(movie.getLayers());
    movieString = (_movieString_1 + _extractLayers);
    String _movieString_2 = movieString;
    String _extractFinalCut = this.extractFinalCut(movie);
    movieString = (_movieString_2 + _extractFinalCut);
    return movieString;
  }
  
  private void extractMovieDuration(final Movie movie) {
    EList<Layer> _layers = movie.getLayers();
    for (final Layer layer : _layers) {
      EList<Element> _elements = layer.getElements();
      for (final Element element : _elements) {
        if (((element instanceof AudioElement) || (element instanceof GraphicalElement))) {
          int tmpDuration = 0;
          int _duration = element.getDuration();
          boolean _greaterThan = (_duration > 0);
          if (_greaterThan) {
            tmpDuration = element.getDuration();
          }
          TemporalPosition _temporalPosition = element.getTemporalPosition();
          boolean _tripleNotEquals = (_temporalPosition != null);
          if (_tripleNotEquals) {
            Element _elementToStartAfter = element.getTemporalPosition().getElementToStartAfter();
            boolean _tripleNotEquals_1 = (_elementToStartAfter != null);
            if (_tripleNotEquals_1) {
              int _tmpDuration = tmpDuration;
              int _endingTime = element.getTemporalPosition().getElementToStartAfter().getEndingTime();
              tmpDuration = (_tmpDuration + _endingTime);
            }
            int _beginTime = element.getTemporalPosition().getBeginTime();
            boolean _greaterThan_1 = (_beginTime > 0);
            if (_greaterThan_1) {
              int _tmpDuration_1 = tmpDuration;
              int _beginTime_1 = element.getTemporalPosition().getBeginTime();
              tmpDuration = (_tmpDuration_1 + _beginTime_1);
            }
          }
          element.setEndingTime(tmpDuration);
          if ((tmpDuration > this.totalMovieDuration)) {
            this.totalMovieDuration = tmpDuration;
          }
        }
      }
    }
  }
  
  private String extractFinalCut(final Movie movie) {
    String sFinal = "\nfinal_video = CompositeVideoClip([";
    for (int i = 0; (i < this.elementsVarNames.size()); i++) {
      {
        if ((i != 0)) {
          String _sFinal = sFinal;
          sFinal = (_sFinal + ", ");
        }
        String _sFinal_1 = sFinal;
        Object _get = this.elementsVarNames.get(i);
        sFinal = (_sFinal_1 + _get);
      }
    }
    String _sFinal = sFinal;
    sFinal = (_sFinal + (((((("], size=(" + this.varMovieWidth) + ",") + this.varMovieHeight) + ")).set_duration(") + Integer.valueOf(this.totalMovieDuration)) + ")\n"));
    String _sFinal_1 = sFinal;
    String _name = movie.getName();
    String _plus = ("final_video.write_videofile(\'./" + _name);
    String _plus_1 = (_plus + ".mp4\', codec=\'mpeg4\', bitrate=\'5000k\', fps=");
    int _fps = movie.getFps();
    String _plus_2 = (_plus_1 + Integer.valueOf(_fps));
    String _plus_3 = (_plus_2 + ")");
    sFinal = (_sFinal_1 + _plus_3);
    return sFinal;
  }
  
  private String extractLayers(final List<Layer> layers) {
    String s = "";
    for (final Layer layer : layers) {
      String _s = s;
      String _extractElementsFromLayer = this.extractElementsFromLayer(layer.getElements());
      s = (_s + _extractElementsFromLayer);
    }
    return s;
  }
  
  private String extractElementInLayer(final Element element) {
    String s = "";
    if ((element instanceof Text)) {
      String _s = s;
      String _extractElement = this.extractElement(((Text) element));
      s = (_s + _extractElement);
    } else {
      if ((element instanceof Picture)) {
        String _s_1 = s;
        String _extractElement_1 = this.extractElement(((Picture) element));
        s = (_s_1 + _extractElement_1);
      } else {
        if ((element instanceof Video)) {
          String _s_2 = s;
          String _extractElement_2 = this.extractElement(((Video) element));
          s = (_s_2 + _extractElement_2);
        } else {
          if ((element instanceof Effect)) {
            String _s_3 = s;
            String _extractElement_3 = this.extractElement(((Effect) element));
            s = (_s_3 + _extractElement_3);
          } else {
            if ((element instanceof Shape)) {
              String _s_4 = s;
              String _extractElement_4 = this.extractElement(((Shape) element));
              s = (_s_4 + _extractElement_4);
            } else {
              if ((element instanceof AudioElement)) {
                String _s_5 = s;
                String _extractElement_5 = this.extractElement(((AudioElement) element));
                s = (_s_5 + _extractElement_5);
              }
            }
          }
        }
      }
    }
    return s;
  }
  
  private String extractBeginTimeFromElement(final Element element) {
    String s = "";
    int duration = 0;
    TemporalPosition _temporalPosition = element.getTemporalPosition();
    boolean _tripleNotEquals = (_temporalPosition != null);
    if (_tripleNotEquals) {
      Element _elementToStartAfter = element.getTemporalPosition().getElementToStartAfter();
      boolean _tripleNotEquals_1 = (_elementToStartAfter != null);
      if (_tripleNotEquals_1) {
        int _duration = duration;
        int _endingTime = element.getTemporalPosition().getElementToStartAfter().getEndingTime();
        duration = (_duration + _endingTime);
      }
      int _beginTime = element.getTemporalPosition().getBeginTime();
      boolean _greaterThan = (_beginTime > 0);
      if (_greaterThan) {
        int _duration_1 = duration;
        int _beginTime_1 = element.getTemporalPosition().getBeginTime();
        duration = (_duration_1 + _beginTime_1);
      }
    }
    if ((duration > 0)) {
      String _s = s;
      s = (_s + (("\\\n\t.set_start(" + Integer.valueOf(duration)) + ")"));
    }
    return s;
  }
  
  private String extractDurationFromElement(final Element element) {
    String s = "";
    int duration = (-1);
    int _duration = element.getDuration();
    boolean _greaterThan = (_duration > 0);
    if (_greaterThan) {
      duration = element.getDuration();
    } else {
      duration = this.totalMovieDuration;
    }
    if ((element instanceof Video)) {
      Video video = ((Video) element);
      int _beginCropTime = video.getBeginCropTime();
      boolean _equals = (_beginCropTime == 0);
      if (_equals) {
        String _s = s;
        s = (_s + (("\\\n\t.set_duration(" + Integer.valueOf(duration)) + ")"));
      } else {
        if ((element instanceof AudioElement)) {
          AudioElement audio = ((AudioElement) element);
          int _beginCropTime_1 = audio.getBeginCropTime();
          boolean _equals_1 = (_beginCropTime_1 == 0);
          if (_equals_1) {
            String _s_1 = s;
            s = (_s_1 + (("\\\n\t.set_duration(" + Integer.valueOf(duration)) + ")"));
          }
        }
      }
    } else {
      String _s_2 = s;
      s = (_s_2 + (("\\\n\t.set_duration(" + Integer.valueOf(duration)) + ")"));
    }
    return s;
  }
  
  private String extractDimensionFromElement(final GraphicalElement element) {
    String s = "";
    String width = "0";
    String height = "0";
    Dimension _dimension = element.getDimension();
    boolean _tripleNotEquals = (_dimension != null);
    if (_tripleNotEquals) {
      int _width = element.getDimension().getWidth();
      boolean _lessThan = (_width < 0);
      if (_lessThan) {
        width = this.varMovieWidth;
      } else {
        int _width_1 = element.getDimension().getWidth();
        String _plus = (Integer.valueOf(_width_1) + "");
        width = _plus;
      }
      int _height = element.getDimension().getHeight();
      boolean _lessThan_1 = (_height < 0);
      if (_lessThan_1) {
        height = this.varMovieWidth;
      } else {
        int _height_1 = element.getDimension().getHeight();
        String _plus_1 = (Integer.valueOf(_height_1) + "");
        height = _plus_1;
      }
    } else {
      width = this.varMovieWidth;
      height = this.varMovieWidth;
    }
    if ((element instanceof Shape)) {
      String _s = s;
      s = (_s + (((("(" + width) + ", ") + height) + ")"));
    } else {
      String _s_1 = s;
      s = (_s_1 + (((("\\\n\t.resize((" + width) + ", ") + height) + "))"));
    }
    return s;
  }
  
  private String extractPositionFromElement(final GraphicalElement element) {
    String s = "";
    String posX = "";
    String posY = "";
    Position _position = element.getPosition();
    boolean _tripleNotEquals = (_position != null);
    if (_tripleNotEquals) {
      posX = this.extractValueFromItemPosition(element.getPosition().getX());
      posY = this.extractValueFromItemPosition(element.getPosition().getY());
    } else {
      posX = "0";
      posY = "0";
    }
    if (((!posX.equals("0")) || (!posY.equals("0")))) {
      String _s = s;
      s = (_s + (((("\\\n\t.set_pos((" + posX) + ", ") + posY) + "))"));
    }
    return s;
  }
  
  private String extractMarginsFromElement(final GraphicalElement element) {
    String s = "";
    EList<Margin> _margins = element.getMargins();
    for (final Margin margin : _margins) {
      {
        String color = "[0,0,0]";
        HexadecimalColor _marginColor = margin.getMarginColor();
        boolean _tripleNotEquals = (_marginColor != null);
        if (_tripleNotEquals) {
          String _hexadecimalValue = margin.getMarginColor().getHexadecimalValue();
          String _plus = ("#" + _hexadecimalValue);
          final Color tmp = Color.decode(_plus);
          int _red = tmp.getRed();
          String _plus_1 = ("(" + Integer.valueOf(_red));
          String _plus_2 = (_plus_1 + ",");
          int _green = tmp.getGreen();
          String _plus_3 = (_plus_2 + Integer.valueOf(_green));
          String _plus_4 = (_plus_3 + ",");
          int _blue = tmp.getBlue();
          String _plus_5 = (_plus_4 + Integer.valueOf(_blue));
          String _plus_6 = (_plus_5 + ")");
          color = _plus_6;
        }
        int _size = margin.getSize();
        boolean _greaterThan = (_size > 0);
        if (_greaterThan) {
          String marginName = "";
          boolean _equals = margin.getType().equals(MARGIN_NAME.BOTTOM);
          if (_equals) {
            marginName = "bottom";
          } else {
            boolean _equals_1 = margin.getType().equals(MARGIN_NAME.TOP);
            if (_equals_1) {
              marginName = "top";
            } else {
              boolean _equals_2 = margin.getType().equals(MARGIN_NAME.LEFT);
              if (_equals_2) {
                marginName = "left";
              } else {
                boolean _equals_3 = margin.getType().equals(MARGIN_NAME.RIGHT);
                if (_equals_3) {
                  marginName = "right";
                }
              }
            }
          }
          String _s = s;
          int _size_1 = margin.getSize();
          String _plus_7 = ((("\\\n\t.margin(" + marginName) + "=") + Integer.valueOf(_size_1));
          String _plus_8 = (_plus_7 + ", color=");
          String _plus_9 = (_plus_8 + color);
          String _plus_10 = (_plus_9 + ", opacity=");
          float _marginColorOpacity = margin.getMarginColorOpacity();
          String _plus_11 = (_plus_10 + Float.valueOf(_marginColorOpacity));
          String _plus_12 = (_plus_11 + ")");
          s = (_s + _plus_12);
        }
      }
    }
    return s;
  }
  
  private String extractValueFromItemPosition(final ItemPosition item) {
    if ((item instanceof ItemPositionInt)) {
      int _position = ((ItemPositionInt) item).getPosition();
      return (Integer.valueOf(_position) + "");
    }
    String _position_1 = ((ItemPositionString) item).getPosition();
    String _plus = ("\'" + _position_1);
    return (_plus + "\'");
  }
  
  private String extractElement(final Text element) {
    String _name = element.getName();
    String _plus = (_name + " = TextClip(");
    String _plus_1 = (_plus + "\"");
    String _text = element.getText();
    String _plus_2 = (_plus_1 + _text);
    String _plus_3 = (_plus_2 + "\"");
    String _plus_4 = (_plus_3 + ", color=\'#");
    String _hexadecimalValue = element.getColor().getHexadecimalValue();
    String _plus_5 = (_plus_4 + _hexadecimalValue);
    String _plus_6 = (_plus_5 + "\'");
    String _plus_7 = (_plus_6 + ", fontsize=");
    int _fontSize = element.getFontSize();
    String _plus_8 = (_plus_7 + Integer.valueOf(_fontSize));
    String _plus_9 = (_plus_8 + ")");
    String _extractBeginTimeFromElement = this.extractBeginTimeFromElement(element);
    String _plus_10 = (_plus_9 + _extractBeginTimeFromElement);
    String _extractDurationFromElement = this.extractDurationFromElement(element);
    String _plus_11 = (_plus_10 + _extractDurationFromElement);
    String _extractPositionFromElement = this.extractPositionFromElement(element);
    String _plus_12 = (_plus_11 + _extractPositionFromElement);
    String s = (_plus_12 + "\n\n");
    this.elementsVarNames.add(element.getName());
    return s;
  }
  
  private String extractElement(final Picture element) {
    String _name = element.getName();
    String _plus = (_name + " = ImageClip(");
    String _plus_1 = (_plus + "\"");
    String _url = element.getUrl();
    String _plus_2 = (_plus_1 + _url);
    String _plus_3 = (_plus_2 + "\"");
    String _plus_4 = (_plus_3 + ")");
    String _extractBeginTimeFromElement = this.extractBeginTimeFromElement(element);
    String _plus_5 = (_plus_4 + _extractBeginTimeFromElement);
    String _extractDurationFromElement = this.extractDurationFromElement(element);
    String _plus_6 = (_plus_5 + _extractDurationFromElement);
    String _extractPositionFromElement = this.extractPositionFromElement(element);
    String _plus_7 = (_plus_6 + _extractPositionFromElement);
    String _extractDimensionFromElement = this.extractDimensionFromElement(element);
    String _plus_8 = (_plus_7 + _extractDimensionFromElement);
    String _extractMarginsFromElement = this.extractMarginsFromElement(element);
    String _plus_9 = (_plus_8 + _extractMarginsFromElement);
    String s = (_plus_9 + "\n\n");
    this.elementsVarNames.add(element.getName());
    return s;
  }
  
  private String extractElement(final AudioElement element) {
    String volume = "";
    String fadeIn = "";
    String fadeOut = "";
    String cropString = "";
    float _volume = element.getVolume();
    boolean _notEquals = (_volume != 1);
    if (_notEquals) {
      float _volume_1 = element.getVolume();
      String _plus = ("\\\n\t.volumex(" + Float.valueOf(_volume_1));
      String _plus_1 = (_plus + ")");
      volume = _plus_1;
    }
    int _fadeIn = element.getFadeIn();
    boolean _notEquals_1 = (_fadeIn != 0);
    if (_notEquals_1) {
      int _fadeIn_1 = element.getFadeIn();
      String _plus_2 = ("\\\n\t.audio_fadein(" + Integer.valueOf(_fadeIn_1));
      String _plus_3 = (_plus_2 + ")");
      fadeIn = _plus_3;
    }
    int _fadeOut = element.getFadeOut();
    boolean _notEquals_2 = (_fadeOut != 0);
    if (_notEquals_2) {
      int _fadeOut_1 = element.getFadeOut();
      String _plus_4 = ("\\\n\t.audio_fadeout(" + Integer.valueOf(_fadeOut_1));
      String _plus_5 = (_plus_4 + ")");
      fadeOut = _plus_5;
    }
    int _beginCropTime = element.getBeginCropTime();
    boolean _greaterThan = (_beginCropTime > (-1));
    if (_greaterThan) {
      int _beginCropTime_1 = element.getBeginCropTime();
      String _plus_6 = ("\\\n\t.subclip(" + Integer.valueOf(_beginCropTime_1));
      String _plus_7 = (_plus_6 + ", ");
      int _beginCropTime_2 = element.getBeginCropTime();
      int _duration = element.getDuration();
      int _plus_8 = (_beginCropTime_2 + _duration);
      String _plus_9 = (_plus_7 + Integer.valueOf(_plus_8));
      String _plus_10 = (_plus_9 + ")");
      cropString = _plus_10;
    }
    String _name = element.getName();
    String _plus_11 = (_name + " = AudioFileClip(");
    String _plus_12 = (_plus_11 + "\"");
    String _url = element.getUrl();
    String _plus_13 = (_plus_12 + _url);
    String _plus_14 = (_plus_13 + "\"");
    String _plus_15 = (_plus_14 + ")");
    String _extractBeginTimeFromElement = this.extractBeginTimeFromElement(element);
    String _plus_16 = (_plus_15 + _extractBeginTimeFromElement);
    String _extractDurationFromElement = this.extractDurationFromElement(element);
    String _plus_17 = (_plus_16 + _extractDurationFromElement);
    String _plus_18 = (_plus_17 + cropString);
    String _plus_19 = (_plus_18 + volume);
    String _plus_20 = (_plus_19 + fadeIn);
    String _plus_21 = (_plus_20 + fadeOut);
    String s = (_plus_21 + "\n");
    String _s = s;
    String _name_1 = element.getName();
    String _plus_22 = (_name_1 + "_fake_audio_attached = ColorClip(size=(0, 0), col=[0,0,0]).set_audio(");
    String _name_2 = element.getName();
    String _plus_23 = (_plus_22 + _name_2);
    String _plus_24 = (_plus_23 + ")\n\n");
    s = (_s + _plus_24);
    String _name_3 = element.getName();
    String _plus_25 = (_name_3 + "_fake_audio_attached");
    this.elementsVarNames.add(_plus_25);
    return s;
  }
  
  private String extractElement(final Video element) {
    String cropString = "";
    int _beginCropTime = element.getBeginCropTime();
    boolean _greaterThan = (_beginCropTime > (-1));
    if (_greaterThan) {
      int _beginCropTime_1 = element.getBeginCropTime();
      String _plus = ("\\\n\t.subclip(" + Integer.valueOf(_beginCropTime_1));
      String _plus_1 = (_plus + ", ");
      int _beginCropTime_2 = element.getBeginCropTime();
      int _duration = element.getDuration();
      int _plus_2 = (_beginCropTime_2 + _duration);
      String _plus_3 = (_plus_1 + Integer.valueOf(_plus_2));
      String _plus_4 = (_plus_3 + ")");
      cropString = _plus_4;
    }
    String audio = "";
    boolean _isEnableAudio = element.isEnableAudio();
    boolean _equals = (_isEnableAudio == true);
    if (_equals) {
      audio = "True";
    } else {
      audio = "False";
    }
    String _name = element.getName();
    String _plus_5 = (_name + " = VideoFileClip(");
    String _plus_6 = (_plus_5 + "\"");
    String _url = element.getUrl();
    String _plus_7 = (_plus_6 + _url);
    String _plus_8 = (_plus_7 + "\"");
    String _plus_9 = (_plus_8 + ", audio=");
    String _plus_10 = (_plus_9 + audio);
    String _plus_11 = (_plus_10 + ")");
    String _extractBeginTimeFromElement = this.extractBeginTimeFromElement(element);
    String _plus_12 = (_plus_11 + _extractBeginTimeFromElement);
    String _extractDurationFromElement = this.extractDurationFromElement(element);
    String _plus_13 = (_plus_12 + _extractDurationFromElement);
    String _extractDimensionFromElement = this.extractDimensionFromElement(element);
    String _plus_14 = (_plus_13 + _extractDimensionFromElement);
    String _extractPositionFromElement = this.extractPositionFromElement(element);
    String _plus_15 = (_plus_14 + _extractPositionFromElement);
    String _extractMarginsFromElement = this.extractMarginsFromElement(element);
    String _plus_16 = (_plus_15 + _extractMarginsFromElement);
    String _plus_17 = (_plus_16 + cropString);
    String s = (_plus_17 + "\n\n");
    this.elementsVarNames.add(element.getName());
    return s;
  }
  
  private String extractElement(final FadeIn element) {
    String s = "";
    EList<GraphicalElement> _elements = element.getElements();
    for (final GraphicalElement elementToApplyEffect : _elements) {
      String _s = s;
      String _name = elementToApplyEffect.getName();
      String _plus = (_name + " = ");
      String _name_1 = elementToApplyEffect.getName();
      String _plus_1 = (_plus + _name_1);
      String _plus_2 = (_plus_1 + ".crossfadein(");
      int _duration = element.getDuration();
      String _plus_3 = (_plus_2 + Integer.valueOf(_duration));
      String _plus_4 = (_plus_3 + ")\n\n");
      s = (_s + _plus_4);
    }
    return s;
  }
  
  private String extractElement(final FadeOut element) {
    String s = "";
    EList<GraphicalElement> _elements = element.getElements();
    for (final GraphicalElement elementToApplyEffect : _elements) {
      String _s = s;
      String _name = elementToApplyEffect.getName();
      String _plus = (_name + " = ");
      String _name_1 = elementToApplyEffect.getName();
      String _plus_1 = (_plus + _name_1);
      String _plus_2 = (_plus_1 + ".crossfadeout(");
      int _duration = element.getDuration();
      String _plus_3 = (_plus_2 + Integer.valueOf(_duration));
      String _plus_4 = (_plus_3 + ")\n\n");
      s = (_s + _plus_4);
    }
    return s;
  }
  
  private String extractElement(final Translate element) {
    String s = "";
    return s;
  }
  
  private String extractElement(final Rectangle element) {
    String color = "[0,0,0]";
    HexadecimalColor _color = element.getColor();
    boolean _tripleNotEquals = (_color != null);
    if (_tripleNotEquals) {
      String _hexadecimalValue = element.getColor().getHexadecimalValue();
      String _plus = ("#" + _hexadecimalValue);
      final Color tmp = Color.decode(_plus);
      int _red = tmp.getRed();
      String _plus_1 = ("[" + Integer.valueOf(_red));
      String _plus_2 = (_plus_1 + ",");
      int _green = tmp.getGreen();
      String _plus_3 = (_plus_2 + Integer.valueOf(_green));
      String _plus_4 = (_plus_3 + ",");
      int _blue = tmp.getBlue();
      String _plus_5 = (_plus_4 + Integer.valueOf(_blue));
      String _plus_6 = (_plus_5 + "]");
      color = _plus_6;
    }
    String _name = element.getName();
    String _plus_7 = (_name + " = ColorClip(size=");
    String _extractDimensionFromElement = this.extractDimensionFromElement(element);
    String _plus_8 = (_plus_7 + _extractDimensionFromElement);
    String _plus_9 = (_plus_8 + ", col=");
    String _plus_10 = (_plus_9 + color);
    String _plus_11 = (_plus_10 + ")");
    String _extractBeginTimeFromElement = this.extractBeginTimeFromElement(element);
    String _plus_12 = (_plus_11 + _extractBeginTimeFromElement);
    String _extractDurationFromElement = this.extractDurationFromElement(element);
    String _plus_13 = (_plus_12 + _extractDurationFromElement);
    String _extractMarginsFromElement = this.extractMarginsFromElement(element);
    String _plus_14 = (_plus_13 + _extractMarginsFromElement);
    String _extractPositionFromElement = this.extractPositionFromElement(element);
    String _plus_15 = (_plus_14 + _extractPositionFromElement);
    String s = (_plus_15 + "\n\n");
    this.elementsVarNames.add(element.getName());
    return s;
  }
  
  private String extractElement(final Effect element) {
    String s = "";
    if ((element instanceof FadeIn)) {
      String _s = s;
      String _extractElement = this.extractElement(((FadeIn) element));
      s = (_s + _extractElement);
    } else {
      if ((element instanceof FadeOut)) {
        String _s_1 = s;
        String _extractElement_1 = this.extractElement(((FadeOut) element));
        s = (_s_1 + _extractElement_1);
      } else {
        if ((element instanceof Translate)) {
          String _s_2 = s;
          String _extractElement_2 = this.extractElement(((Translate) element));
          s = (_s_2 + _extractElement_2);
        }
      }
    }
    return s;
  }
  
  private String extractElement(final Shape element) {
    String s = "";
    if ((element instanceof Rectangle)) {
      String _s = s;
      String _extractElement = this.extractElement(((Rectangle) element));
      s = (_s + _extractElement);
    }
    return s;
  }
  
  private String extractElementsFromLayer(final List<Element> elements) {
    String s = "";
    for (final Element element : elements) {
      String _s = s;
      String _extractElementInLayer = this.extractElementInLayer(element);
      s = (_s + _extractElementInLayer);
    }
    return s;
  }
  
  private String extractMovieSize(final Movie movie) {
    int _height = movie.getDimension().getHeight();
    String _plus = ((this.varMovieHeight + " = ") + Integer.valueOf(_height));
    String s = (_plus + "\n");
    String _s = s;
    int _width = movie.getDimension().getWidth();
    String _plus_1 = ((this.varMovieWidth + " = ") + Integer.valueOf(_width));
    String _plus_2 = (_plus_1 + "\n");
    s = (_s + _plus_2);
    String _s_1 = s;
    s = (_s_1 + "\n");
    return s;
  }
  
  private String loadImports() {
    String s = "# -*- coding: ISO-8859-1 -*-\n\n";
    String _s = s;
    s = (_s + "from moviepy.editor import *\n");
    String _s_1 = s;
    s = (_s_1 + "\n");
    return s;
  }
  
  private final int timelineElementHeight = 27;
  
  private final int timelineElementHeightWithMargin = 28;
  
  private int ratio = 8;
  
  private String compileCss() {
    String s = (((("\t\t\t.layer-timeline {\n" + "\t\t\t\tposition: relative;\n") + "\t\t\t\tmargin-left: 100px;\n") + "\t\t\t\twidth: 100%;\n") + "\t\t\t}\n");
    String _s = s;
    s = (_s + ((((((("\t\t\t.layer-name {\n" + "\t\t\t\tz-index: 2;\n") + "\t\t\t\tposition: fixed;\n") + "\t\t\t\twidth: 100px;\n") + "\t\t\t\tbackground-color: #18abad;\n") + "\t\t\t\tcolor: #fff;\n") + "\t\t\t\tfont-size: 18pt;\n") + "\t\t\t}\n"));
    String _s_1 = s;
    s = (_s_1 + (((((("\t\t\t.layer-element {\n" + "\t\t\t\tcolor: #fff;\n") + "\t\t\t\tfont-size: 15pt;\n") + "\t\t\t\tmargin-left: 10px;\n") + "\t\t\t\tmargin-bottom: 1px;\n") + "\t\t\t\tborder-radius: 4px;\n") + "\t\t\t}\n"));
    String _s_2 = s;
    s = (_s_2 + ((("\t\t\t.layer {\n" + "\t\t\t\tmargin-bottom: 1px;\n") + "\t\t\t\tdisplay: flex;\n") + "\t\t\t}\n"));
    String _s_3 = s;
    s = (_s_3 + (((("\t\t\t#timeline-indicator {\n" + "\t\t\t\tmargin-left: 100px;\n") + "\t\t\t\theight: 15px;\n") + "\t\t\t\tbackground-color: #e3e3e3;\n") + "\t\t\t}\n"));
    String _s_4 = s;
    s = (_s_4 + (((((("\t\t\t#container-timeline-indicator {\n" + "\t\t\t\theight: 15px;\n") + "\t\t\t\tposition: relative;\n") + "\t\t\t\tleft: 100px;\n") + "\t\t\t\twidth: calc(100% - 100px);\n") + "\t\t\t\ttop: -15px;\n") + "\t\t\t}\n"));
    String _s_5 = s;
    s = (_s_5 + ((((("\t\t\t.timeline-indicator-element {\n" + "\t\t\t\theight: 100%;\n") + "\t\t\t\ttop: 100%;\n") + "\t\t\t\ttransform: translate(-50%, 0);\n") + "\t\t\t\tposition: absolute;\n") + "\t\t\t}\n"));
    String _s_6 = s;
    s = (_s_6 + (((((((("\t\t\t.timeline-indicator-element::before {\n" + "\t\t\t\tcontent: \"\";") + "\t\t\t\twidth: 2px;") + "\t\t\t\theight: 100%;") + "\t\t\t\tleft: 50%;") + "\t\t\t\tposition: absolute;\n") + "\t\t\t\tbackground-color: black;") + "\t\t\t\ttop: -100%;") + "}"));
    String _s_7 = s;
    s = (_s_7 + ((((("\t\t\tbody {\n" + "\t\t\t\tmargin: 0;\n") + "\t\t\t\tpadding: 0;\n") + "\t\t\t\tpadding: 0;\n") + "\t\t\t\toverflow: auto;\n") + "\t\t\t}\n"));
    return s;
  }
  
  private String compileTimeline(final Movie movie) {
    if ((this.totalMovieDuration > 30)) {
      this.ratio = (3 * (100 / this.totalMovieDuration));
      if ((this.ratio < 4)) {
        this.ratio = 4;
      }
    }
    String _compileCss = this.compileCss();
    String _plus = (((("<!DOCTYPE html>\n" + "<html>\n") + "\t<head>\n") + "\t\t<style>\n") + _compileCss);
    String _plus_1 = (_plus + "\t\t</style>\n");
    String _plus_2 = (_plus_1 + "\t</head>\n");
    String s = (_plus_2 + "\t<body>\n");
    int top = 0;
    for (int i = 0; (i < movie.getLayers().size()); i++) {
      {
        Layer layer = movie.getLayers().get(i);
        String _s = s;
        s = (_s + "\t\t<div class=\"layer\">\n");
        String _s_1 = s;
        s = (_s_1 + "\t\t\t<div class=\"layer-name\" style=\"");
        String _s_2 = s;
        s = (_s_2 + ((" top: " + Integer.valueOf(top)) + "px;"));
        int numberElements = 0;
        EList<Element> _elements = layer.getElements();
        for (final Element element : _elements) {
          if ((element instanceof Effect)) {
            EList<GraphicalElement> _elements_1 = ((Effect) element).getElements();
            for (final Element elementInEffect : _elements_1) {
              int _numberElements = numberElements;
              numberElements = (_numberElements + 1);
            }
          } else {
            int _numberElements_1 = numberElements;
            numberElements = (_numberElements_1 + 1);
          }
        }
        int _p = top;
        top = (_p + ((numberElements * this.timelineElementHeightWithMargin) + 1));
        String _s_3 = s;
        s = (_s_3 + ((" height: " + Integer.valueOf((numberElements * this.timelineElementHeightWithMargin))) + "px;"));
        String _s_4 = s;
        s = (_s_4 + "\">");
        String _s_5 = s;
        s = (_s_5 + (("\t\t\t\tLayer " + Integer.valueOf(i)) + "\n"));
        String _s_6 = s;
        s = (_s_6 + "\t\t\t</div>\n");
        String _s_7 = s;
        s = (_s_7 + "\t\t\t<div class=\"layer-timeline\">\n");
        EList<Element> _elements_2 = layer.getElements();
        for (final Element element_1 : _elements_2) {
          {
            int duration = (-1);
            int _duration = element_1.getDuration();
            boolean _greaterThan = (_duration > 0);
            if (_greaterThan) {
              duration = element_1.getDuration();
            } else {
              duration = this.totalMovieDuration;
            }
            if ((element_1 instanceof Effect)) {
              final Effect finalElement = ((Effect) element_1);
              EList<GraphicalElement> _elements_3 = finalElement.getElements();
              for (final Element elementInEffect_1 : _elements_3) {
                {
                  int beginTime = 0;
                  if ((finalElement instanceof FadeIn)) {
                    TemporalPosition _temporalPosition = elementInEffect_1.getTemporalPosition();
                    boolean _tripleNotEquals = (_temporalPosition != null);
                    if (_tripleNotEquals) {
                      int _beginTime = beginTime;
                      int _beginTime_1 = elementInEffect_1.getTemporalPosition().getBeginTime();
                      beginTime = (_beginTime + _beginTime_1);
                      Element _elementToStartAfter = elementInEffect_1.getTemporalPosition().getElementToStartAfter();
                      boolean _tripleNotEquals_1 = (_elementToStartAfter != null);
                      if (_tripleNotEquals_1) {
                        int _beginTime_2 = beginTime;
                        int _endingTime = elementInEffect_1.getTemporalPosition().getElementToStartAfter().getEndingTime();
                        beginTime = (_beginTime_2 + _endingTime);
                      }
                    }
                  } else {
                    if ((finalElement instanceof FadeOut)) {
                      int _endingTime_1 = elementInEffect_1.getEndingTime();
                      int _minus = (_endingTime_1 - duration);
                      beginTime = _minus;
                    }
                  }
                  String _s_8 = s;
                  s = (_s_8 + "\t\t\t<div class=\"layer-element\" style=\"");
                  String _s_9 = s;
                  s = (_s_9 + ((" width:" + Integer.valueOf((duration * this.ratio))) + "%;"));
                  String _s_10 = s;
                  s = (_s_10 + " background-color: #000;");
                  String _s_11 = s;
                  s = (_s_11 + ((" margin-left:" + Integer.valueOf((beginTime * this.ratio))) + "%;"));
                  String _s_12 = s;
                  s = (_s_12 + ((" height:" + Integer.valueOf(this.timelineElementHeight)) + "px;"));
                  String _s_13 = s;
                  s = (_s_13 + "\">\n");
                  String _s_14 = s;
                  String _name = ((Effect)element_1).getName();
                  String _plus_3 = (_name + "\n");
                  s = (_s_14 + _plus_3);
                  String _s_15 = s;
                  s = (_s_15 + "\t\t\t</div>\n");
                }
              }
            } else {
              String _s_8 = s;
              s = (_s_8 + "\t\t\t<div class=\"layer-element\" style=\"");
              int beginTime = 0;
              TemporalPosition _temporalPosition = element_1.getTemporalPosition();
              boolean _tripleNotEquals = (_temporalPosition != null);
              if (_tripleNotEquals) {
                int _beginTime = beginTime;
                int _beginTime_1 = element_1.getTemporalPosition().getBeginTime();
                beginTime = (_beginTime + _beginTime_1);
                Element _elementToStartAfter = element_1.getTemporalPosition().getElementToStartAfter();
                boolean _tripleNotEquals_1 = (_elementToStartAfter != null);
                if (_tripleNotEquals_1) {
                  int _beginTime_2 = beginTime;
                  int _endingTime = element_1.getTemporalPosition().getElementToStartAfter().getEndingTime();
                  beginTime = (_beginTime_2 + _endingTime);
                }
              }
              if ((element_1 instanceof AudioElement)) {
                int borderTopLeft = 4;
                int borderTopRight = 4;
                int _fadeIn = ((AudioElement)element_1).getFadeIn();
                boolean _greaterThan_1 = (_fadeIn > 0);
                if (_greaterThan_1) {
                  int _fadeIn_1 = ((AudioElement)element_1).getFadeIn();
                  int _multiply = (_fadeIn_1 * 10);
                  int _multiply_1 = (_multiply * this.ratio);
                  int _plus_3 = (1 + _multiply_1);
                  borderTopLeft = _plus_3;
                }
                int _fadeOut = ((AudioElement)element_1).getFadeOut();
                boolean _greaterThan_2 = (_fadeOut > 0);
                if (_greaterThan_2) {
                  int _fadeOut_1 = ((AudioElement)element_1).getFadeOut();
                  int _multiply_2 = (_fadeOut_1 * 10);
                  int _multiply_3 = (_multiply_2 * this.ratio);
                  int _plus_4 = (1 + _multiply_3);
                  borderTopRight = _plus_4;
                }
                String _s_9 = s;
                s = (_s_9 + ((((" border-radius: " + Integer.valueOf(borderTopLeft)) + "px ") + Integer.valueOf(borderTopRight)) + "px 0 0;"));
              }
              String _s_10 = s;
              s = (_s_10 + ((" width:" + Integer.valueOf((duration * this.ratio))) + "%;"));
              String _s_11 = s;
              s = (_s_11 + " background-color: #000;");
              String _s_12 = s;
              s = (_s_12 + ((" margin-left:" + Integer.valueOf((beginTime * this.ratio))) + "%;"));
              String _s_13 = s;
              s = (_s_13 + ((" height:" + Integer.valueOf(this.timelineElementHeight)) + "px;"));
              String _s_14 = s;
              s = (_s_14 + "\">\n");
              String _s_15 = s;
              String _name = element_1.getName();
              String _plus_5 = (_name + "\n");
              s = (_s_15 + _plus_5);
              String _s_16 = s;
              s = (_s_16 + "\t\t\t</div>\n");
            }
          }
        }
        String _s_8 = s;
        s = (_s_8 + "\t\t\t</div>\n");
        String _s_9 = s;
        s = (_s_9 + "\t\t</div>\n");
      }
    }
    String _s = s;
    s = (_s + (((("\t\t<div id=\"timeline-indicator\" style=\"width: calc(" + Integer.valueOf((this.totalMovieDuration * this.ratio))) + "% - ") + Integer.valueOf((this.totalMovieDuration * this.ratio))) + "px);\"></div>\n"));
    String _s_1 = s;
    s = (_s_1 + "\t\t<div id=\"container-timeline-indicator\">\n");
    {
      int i = 0;
      boolean _while = (i < this.totalMovieDuration);
      while (_while) {
        String _s_2 = s;
        s = (_s_2 + (((("\t\t\t<div class=\"timeline-indicator-element\" style=\"left: " + Integer.valueOf((i * this.ratio))) + "%;\">") + Integer.valueOf(i)) + "s</div>"));
        int _i = i;
        i = (_i + 3);
        _while = (i < this.totalMovieDuration);
      }
    }
    String _s_2 = s;
    s = (_s_2 + (((("\t\t\t<div class=\"timeline-indicator-element\" style=\"left: " + Integer.valueOf((this.totalMovieDuration * this.ratio))) + "%\">") + Integer.valueOf(this.totalMovieDuration)) + "s</div>"));
    String _s_3 = s;
    s = (_s_3 + "\t\t</div>\n");
    String _s_4 = s;
    s = (_s_4 + ("\t</body>\n" + "</html>\n"));
    return s;
  }
}
